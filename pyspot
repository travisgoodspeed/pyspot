#!/usr/bin/python
# Quick an dirty SpotConnect client in Python for pybluez.
# Written by Travis Goodspeed on--not for--the Nokia N900.

# See Alexei Karpenko's article on reversing the SPOT.
# http://natrium42.com/projects/spot/

# This protocol is different from the STX2 one he documented, but the
# principles are the same.  The verbs are different, and checksums may
# be freely omitted.

import bluetooth, sys, time;


class SpotConnect:
   def __init__(self, btaddr=None):
      self.CRC=CRC_CCITT();
      
      while btaddr==None or btaddr=="none":
         print "performing inquiry..."
         nearby_devices = bluetooth.discover_devices(lookup_names = True)
         print "found %d devices" % len(nearby_devices)
         for addr, name in nearby_devices:
            print "  %s - '%s'" % (addr, name)
            if name=='Connect_466':
               btaddr=addr;
         print "Identified modem at %s" % btaddr;

      # Manually use the portnumber.
      port=1;
      
      print "Connecting to %s on port %i." % (btaddr, port);
      connected=False;
      while connected==False:
         try:
            sock=bluetooth.BluetoothSocket(bluetooth.RFCOMM);
            self.sock=sock;
            sock.connect((btaddr,port));
            connected=True;
         except bluetooth.btcommon.BluetoothError:
            print "Connection failed. Retrying.";
            time.sleep(0.5);
            pass;
      #sock.settimeout(2);  #IMPORTANT Must be patient.
      
      
      print "Connected to Device %i" % self.getid();
      
      #print "Trying to send a transmission.";
      #self.tx("\xAA\x0c\x00\x00\x3D\xDD\x85\xC6\xC5\x5D\x01\x00"); 
      #while True:
      #   print "Waiting forever.";
      #   self.rx();
      
      #print "Connected to %s" % self.getinfo();
      
      #Buzz to indicate connection.
      #self.buzz();
   def close(self):
      """Close the connection."""
      print "Disconnecting.";
      self.sock.close();
   def checkin(self,string="OK"):
      """Sends a 42-byte text message to the server."""
      packet="\x26\x01\x00\x01\x00\x01"+string;
      packet="\xaa"+chr(len(packet)+2)+packet;
      print "Transmitting coords and [%s]" % string;
      self.tx(packet);
      while True:
         print "Idling, if that's what 0x52 does.";
         self.tx("\xaa\x03\x52");
         self.rx();
   verbose=1;
   def txstr(self,msg):
      """Transmit normal ASCII.  Useful for modem mode."""
      print "TXSTR: %s" % msg;
      self.sock.send(msg);
   def rxstr(self):
      print "Listening for input."
      data=self.sock.recv(1024);
      print "RXSTR: %s" % data;
      return data;
   def tx(self,msg,rx=True):
      """Transmit a SpotConnect packet.  SFD, Length, and Checksum will be added."""
      #Prepend SFD, length.
      #msg="\x01"+chr(len(msg)+4)+msg;
      #Append CRC.
      #crc=self.CRC.checksum(msg);
      #msg=msg+chr(crc&0xFF)+chr(crc>>8); #Little Endian
      
      if ord(msg[1])!=len(msg):
         print "Length mismatch, 0x%02x!=len(%s)." % (len(msg),msg);
         return None;
      
      self.sock.send(msg);
      if self.verbose: print "Sent 0x%02x bytes: %s" % (len(msg),hex(msg));
      if not rx: return None;
      return self.rx();
   def rx(self, longpacket=True):
      data=None;
      #Is there a reply?
      try:
         while data==None:
            data=self.sock.recv(1024);
         while len(data)<3:
            data=data+self.sock.recv(1024);
         try:
            if data[0:2]=="\x41\x54\x2b": self.handleshell();
         except:
            pass;
         while len(data)<ord(data[1]) and longpacket:
            print "Need more data, got 0x%02x=[%s]" % (len(data),hex(data));
            data=data+self.sock.recv(1024);
      except IOError:
         print "IOError.";
         pass;
      if self.verbose: print "Received [%s]" % hex(data);
      return data;
   def getid(self):
      """Get the 4-byte device ID."""
      uid=0;
      b=self.tx("\xaa\x03\x01");
      for foo in range(3,7):
         uid=uid*256;
         uid=uid+ord(b[foo]);
      return uid;
   def getlatlong(self):
      """Return the (lat,lon) pair as a float."""
      data=self.tx("\xaa\x03\x25");
      if(len(data)!=0x0c):
         print "Error in coord values.";
         return (0,0);
      #lat=data[3:6];
      #lon=data[6:9];
      
      lat=0;
      lon=0;
      for foo in range(3,6):
         lat=lat*256;
         lat=lat+ord(data[foo]);
      for foo in range(6,9):
         lon=lon*256;
         lon=lon+ord(data[foo]);
      lat=lat*90.0/2**23;
      lon=lon*180.0/2**23;
      if lat>45: lat=lat-90;
      if lon>180: lon=lon-360;

      return (lat,lon);
   def dropshell(self):
      """Use the '52 bug to drop an interactive shell."""
      #This never returns enough bytes."
      print "Trying mystery command 0x52 to drop a shell."
      self.tx("\xaa\x03\x52",rx=False);
      print "Setting 1 second timeout.";
      self.sock.settimeout(1);
      print "Waiting for timeout, then broadcasting.""";
      for foo in range(0,10):
         try:
            self.tx("\xaa\x03\x01");
            self.tx("\xaa\x03\x52",rx=False);
            self.rx(longpacket=False);
            self.tx("\xaa\x03\x01");
            self.rx();
         except:
            print "Got the timeout!";
      self.tx("\xaa\x03\x01");
      self.rx();
      print "If you got this far, there's probably no shell. :(";
   def handleshell(self):
      """Called by rx() when it recognizes a Hayes shell."""
      while True:
         try:
            print self.rxstr();
         except:
            pass;
         self.txstr(raw_input());
class CRC_CCITT:
   def __init__(self, inverted=True):
      self.inverted=inverted;
      self.tab=256*[[]]
      for i in xrange(256):
         crc=0
         c = i << 8
         for j in xrange(8):
            if (crc ^ c) & 0x8000:
               crc = ( crc << 1) ^ 0x1021
            else:
                  crc = crc << 1
            c = c << 1
            crc = crc & 0xffff
         self.tab[i]=crc;
   def update_crc(self, crc, c):
      c=0x00ff & (c % 256)
      if self.inverted: c=self.flip(c);
      tmp = ((crc >> 8) ^ c) & 0xffff
      crc = (((crc << 8) ^ self.tab[tmp])) & 0xffff
      return crc;
   def checksum(self,str):
      """Returns the checksum of a string.""";
      #crcval=0;
      crcval=0xFFFF;
      for c in str:
        crcval=self.update_crc(crcval, ord(c));
      return crcval;
   def flip(self,c):
      """Flips the bit order, because that's what Fossil wants."""
      l=[0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15];
      return ((l[c&0x0F]) << 4) + l[(c & 0xF0) >> 4];
   def test(self):
      return True;

def hex(str):
  """Returns the hex decoded version of a byte string."""
  toret="";
  if str==None: return "none";
  for c in str:
    toret="%s %02x" % (toret,ord(c));
  return toret;


btaddr="00:80:e1:fb:db:97";
#if len(sys.argv)>1: btaddr=sys.argv[1];

sc=SpotConnect(btaddr);


(lat, lon) = sc.getlatlong();
print "Last seen at %f, %f." % (lat,lon);

#Set message.


if len(sys.argv)>1:
   sc.checkin(sys.argv[1]);
else:
   #sc.tx("\xaa\x31\x26\x01\x00\x01\x00\x01Mr. Watson, come here. I want to see you.");
   print "Try giving argv[1] to send a message.";

sc.close();

